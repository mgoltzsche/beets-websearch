openapi: "3.0.1"
info:
  title: Song search and playlist management API
  description: Song search and playlist management API
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: Max Goltzsche
    url: https://github.com/mgoltzsche/beets-websearch

servers:
  - url: /

tags:
  - name: composer

paths:
  /attributes:
    get:
      operationId: attributes
      summary: Lists attribute definitions
      description: |
        Lists attributes that can be used as search criteria.
        (The frontend could generate a search form based on this data.)
      tags:
        - composer
      responses:
        '200':
          description: Attribute definitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeDefinitionList'
  /attributes/{attribute}/info:
    get:
      operationId: getAttributeInfo
      summary: Get the attribute value range
      description: |
        Provides the range of available values for a given attribute definition and search query.
      tags:
        - composer
      parameters:
        - name: attribute
          in: path
          description: Attribute name
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: |
            Search query to support drill-down search.
            Accepts a JSON-encoded query object.
          required: false
          schema:
            type: string
            example: '{"genre": {"eq": "Dubstep"}, "bpm": {"lt": "90"}}'
      responses:
        '200':
          description: Supported attribute value range
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeInfo'
  /tracks:
    get:
      operationId: listTracks
      summary: List/search tracks
      description: List and search tracks.
      tags:
        - composer
      parameters:
        - name: query
          in: query
          description: |
            Search query.
            Accepts a JSON-encoded query object.
          required: false
          schema:
            type: string
            example: '{"genre": {"eq": "Dubstep"}, "bpm": {"lt": "90"}}'
      responses:
        '200':
          description: Search result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackList'
  /playlists:
    get:
      operationId: listPlaylists
      summary: List playlists
      description: List all playlists.
      tags:
        - composer
      responses:
        '200':
          description: List of playlists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistList'
  /playlists/{playlistId}:
    parameters:
      - name: playlistId
        in: path
        description: Playlist name
        required: true
        schema:
          type: string
    put:
      operationId: savePlaylist
      summary: Create or update playlist
      description: Create or update a playlist.
      tags:
        - composer
      requestBody:
        description: Playlist that should be created/updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
      responses:
        '200':
          description: Playlist created/updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
    delete:
      operationId: deletePlaylist
      summary: Delete playlist
      description: Delete a playlist.
      tags:
        - composer
      responses:
        '204':
          description: Playlist deleted
  /playlists/{playlistId}/tracks:
    get:
      operationId: getPlaylistTracks
      summary: Get playlist tracks
      description: Get the tracks contained within a playlist.
      tags:
        - composer
      parameters:
        - name: playlistId
          in: path
          description: Playlist name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Playlist contents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackList'


components:
  schemas:
    TrackList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Track'
      required:
        - items
    Track:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        artist:
          type: string
        album:
          type: string
        audioUrl:
          type: string
          description: URL pointing to the audio stream provided by the provider API
      additionalProperties:
        type: string
      required:
        - id
        - artist
        - title
        - audioUrl
      example:
        id: '123'
        artist: Dengue Dengue Dengue
        title: Serpiente Dorada
        bpm: '70'
        audioUrl: 'http://localhost:5000/api/v1/tracks/123/audio'
    AttributeDefinitionList:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeDefinition'
        types:
          type: array
          items:
            $ref: '#/components/schemas/AttributeTypeDefinition'
      required:
        - attributes
        - types
      example:
        attributes:
          - name: bpm
            type: int
            title: BPM
        types:
          - name: int
            operators:
              - gt
              - lt
              - eq
          - name: string
            operators:
              - eq
              - contains
              - regex
          - name: date
            operators:
              - eq
              - gt
              - lt
    AttributeTypeDefinition:
      type: object
      properties:
        name:
          type: string
        operators:
          type: array
          items:
            type: string
      required:
        - name
        - operators
    AttributeDefinition:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        type:
          type: string
          enum:
            - string
            - int
            - float
            - bool
            - date
      required:
        - name
        - title
        - type
    AttributeInfo:
      type: object
      description: Supported value ranges
      properties:
        name:
          type: string
        values:
          type: array
          items:
            type: string
        minValue:
          type: number
        maxValue:
          type: number
      required:
        - name
      example:
        name: bpm
        minValue: 50
        maxValue: 123
    PlaylistList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Playlist'
      required:
        - items
    Playlist:
      type: object
      properties:
        id:
          type: string
          example: jazz
        title:
          type: string
          example: Jazz
        created:
          type: string
          example: "2024-07-14T16:16:16Z"
        query:
          $ref: '#/components/schemas/Query'
        m3uUrl:
          type: string
          description: URL pointing to the M3U playlist provided by the provider API
      required:
        - id
        - title
      example:
        id: slow-dubstep
        title: Slow/dark Dubstep
        created: "2024-07-14T16:16:16Z"
        query:
          - {"genre": {"eq": "Dubstep"}, "bpm": {"lt": "90"}}
        m3uUrl: 'http://localhost:5000/api/v1/playlists/slow-dubstep/tracks.m3u'
    Query:
      type: array
      items:
        type: object
        additionalProperties:
          $ref: '#/components/schemas/Operation'
      example:
        - {"genre": {"eq": "Dubstep"}, "bpm": {"lt": "90"}}
        - {"genre": {"eq": "Grime"}, "bpm": {"lt": "105"}}
    Operation:
      type: object
      properties:
        lt:
          type: string
        gt:
          type: string
        eq:
          type: string
        contains:
          type: string
        regex:
          type: string
